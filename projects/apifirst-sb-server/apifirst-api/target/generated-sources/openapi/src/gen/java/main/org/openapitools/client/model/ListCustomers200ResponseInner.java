/*
 * API first course on Udemy
 * # Introduction API first course on Udemy 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: rsouza01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ListCustomers200ResponseInnerName;
import org.openapitools.client.model.ListCustomers200ResponseInnerPaymentMethodsInner;
import org.openapitools.client.model.ListCustomers200ResponseInnerShipToAddress;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListCustomers200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-13T16:50:15.728540814Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class ListCustomers200ResponseInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private ListCustomers200ResponseInnerName name;

  public static final String SERIALIZED_NAME_SHIP_TO_ADDRESS = "shipToAddress";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_ADDRESS)
  private ListCustomers200ResponseInnerShipToAddress shipToAddress;

  public static final String SERIALIZED_NAME_BILL_TO_ADDRESS = "billToAddress";
  @SerializedName(SERIALIZED_NAME_BILL_TO_ADDRESS)
  private ListCustomers200ResponseInnerShipToAddress billToAddress;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<ListCustomers200ResponseInnerPaymentMethodsInner> paymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "dateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public ListCustomers200ResponseInner() {
  }

  public ListCustomers200ResponseInner(
     UUID id, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateUpdated
  ) {
    this();
    this.id = id;
    this.dateCreated = dateCreated;
    this.dateUpdated = dateUpdated;
  }

  /**
   * Unique identifier representing a specific customer
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  public ListCustomers200ResponseInner name(ListCustomers200ResponseInnerName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public ListCustomers200ResponseInnerName getName() {
    return name;
  }

  public void setName(ListCustomers200ResponseInnerName name) {
    this.name = name;
  }


  public ListCustomers200ResponseInner shipToAddress(ListCustomers200ResponseInnerShipToAddress shipToAddress) {
    this.shipToAddress = shipToAddress;
    return this;
  }

  /**
   * Get shipToAddress
   * @return shipToAddress
   */
  @javax.annotation.Nonnull
  public ListCustomers200ResponseInnerShipToAddress getShipToAddress() {
    return shipToAddress;
  }

  public void setShipToAddress(ListCustomers200ResponseInnerShipToAddress shipToAddress) {
    this.shipToAddress = shipToAddress;
  }


  public ListCustomers200ResponseInner billToAddress(ListCustomers200ResponseInnerShipToAddress billToAddress) {
    this.billToAddress = billToAddress;
    return this;
  }

  /**
   * Get billToAddress
   * @return billToAddress
   */
  @javax.annotation.Nonnull
  public ListCustomers200ResponseInnerShipToAddress getBillToAddress() {
    return billToAddress;
  }

  public void setBillToAddress(ListCustomers200ResponseInnerShipToAddress billToAddress) {
    this.billToAddress = billToAddress;
  }


  public ListCustomers200ResponseInner email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ListCustomers200ResponseInner phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public ListCustomers200ResponseInner paymentMethods(List<ListCustomers200ResponseInnerPaymentMethodsInner> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public ListCustomers200ResponseInner addPaymentMethodsItem(ListCustomers200ResponseInnerPaymentMethodsInner paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

  /**
   * Get paymentMethods
   * @return paymentMethods
   */
  @javax.annotation.Nullable
  public List<ListCustomers200ResponseInnerPaymentMethodsInner> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<ListCustomers200ResponseInnerPaymentMethodsInner> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  /**
   * ISO 8601 Timestamp. Date Created and Date Updated are system managed values, should not be sent in request payloads - will be ignored.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * ISO 8601 Timestamp. Date Created and Date Updated are system managed values, should not be sent in request payloads - will be ignored.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListCustomers200ResponseInner listCustomers200ResponseInner = (ListCustomers200ResponseInner) o;
    return Objects.equals(this.id, listCustomers200ResponseInner.id) &&
        Objects.equals(this.name, listCustomers200ResponseInner.name) &&
        Objects.equals(this.shipToAddress, listCustomers200ResponseInner.shipToAddress) &&
        Objects.equals(this.billToAddress, listCustomers200ResponseInner.billToAddress) &&
        Objects.equals(this.email, listCustomers200ResponseInner.email) &&
        Objects.equals(this.phone, listCustomers200ResponseInner.phone) &&
        Objects.equals(this.paymentMethods, listCustomers200ResponseInner.paymentMethods) &&
        Objects.equals(this.dateCreated, listCustomers200ResponseInner.dateCreated) &&
        Objects.equals(this.dateUpdated, listCustomers200ResponseInner.dateUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, shipToAddress, billToAddress, email, phone, paymentMethods, dateCreated, dateUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListCustomers200ResponseInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shipToAddress: ").append(toIndentedString(shipToAddress)).append("\n");
    sb.append("    billToAddress: ").append(toIndentedString(billToAddress)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("shipToAddress");
    openapiFields.add("billToAddress");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("paymentMethods");
    openapiFields.add("dateCreated");
    openapiFields.add("dateUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("shipToAddress");
    openapiRequiredFields.add("billToAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListCustomers200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListCustomers200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListCustomers200ResponseInner is not found in the empty JSON string", ListCustomers200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListCustomers200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListCustomers200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListCustomers200ResponseInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `name`
      ListCustomers200ResponseInnerName.validateJsonElement(jsonObj.get("name"));
      // validate the required field `shipToAddress`
      ListCustomers200ResponseInnerShipToAddress.validateJsonElement(jsonObj.get("shipToAddress"));
      // validate the required field `billToAddress`
      ListCustomers200ResponseInnerShipToAddress.validateJsonElement(jsonObj.get("billToAddress"));
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (jsonObj.get("paymentMethods") != null && !jsonObj.get("paymentMethods").isJsonNull()) {
        JsonArray jsonArraypaymentMethods = jsonObj.getAsJsonArray("paymentMethods");
        if (jsonArraypaymentMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
          }

          // validate the optional field `paymentMethods` (array)
          for (int i = 0; i < jsonArraypaymentMethods.size(); i++) {
            ListCustomers200ResponseInnerPaymentMethodsInner.validateJsonElement(jsonArraypaymentMethods.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListCustomers200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListCustomers200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListCustomers200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListCustomers200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListCustomers200ResponseInner>() {
           @Override
           public void write(JsonWriter out, ListCustomers200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListCustomers200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListCustomers200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListCustomers200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to ListCustomers200ResponseInner
   */
  public static ListCustomers200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListCustomers200ResponseInner.class);
  }

  /**
   * Convert an instance of ListCustomers200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

